name: Build, Push and Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY: 127893201980.dkr.ecr.ca-central-1.amazonaws.com/scan-files

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write
  checks: write
  statuses: write
  security-events: write

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # tag=v2.11.1
        id: filter
        with:
          filters: |
            api: 'api/**'
            module/s3-scan-object: 'module/s3-scan-object/**'

  build-push-and-deploy:
    if: needs.changes.outputs.images != '[]'
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.images) }}

    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          role-to-assume: arn:aws:iam::127893201980:role/OIDCGithubWorkflowRole
          role-session-name: ECRPushAndDeploy
          aws-region: ca-central-1

      - name: Build container
        working-directory: ./${{ matrix.image }}
        run: |
          docker build \
            --build-arg GIT_SHA=$GITHUB_SHA \
            -t $REGISTRY/${{ matrix.image }}:$GITHUB_SHA \
            -t $REGISTRY/${{ matrix.image }}:latest .

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2f9f10ea3fa2eed41ac443fee8bfbd059af2d0a4 # v1.6.0

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:$GITHUB_SHA
          docker push $REGISTRY/${{ matrix.image }}:latest

      - name: Deploy S3 scan object
        if: matrix.image == 'module/s3-scan-object'
        run: |
          aws lambda update-function-code \
            --function-name s3-scan-object \
            --image-uri $REGISTRY/${{ matrix.image }}:$GITHUB_SHA  > /dev/null 2>&1

      - name: Deploy API
        if: matrix.image == 'api'
        run: |
          aws lambda update-function-code \
            --function-name scan-files-api \
            --image-uri $REGISTRY/${{ matrix.image }}:$GITHUB_SHA  > /dev/null 2>&1

      - name: Migrate database
        if: matrix.image == 'api'
        run: |
          aws lambda wait function-active --function-name scan-files-api
          source .github/workflows/scripts/migrate.sh
          migrate

      - name: API healthcheck
        uses: jtalk/url-health-check-action@61a0e49fff5cde3773b0bbe069d4ebbd04d24f07 # tag=v2
        with:
          url: https://scan-files.cdssandbox.xyz/version
          max-attempts: 3
          retry-delay: 5s

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@cfec0943e40dbb78cee115bbbe89dc17f07b7a0f # v2.1.3
        with:
          docker_image: "${{ env.REGISTRY }}/${{ matrix.image }}:${{ env.GITHUB_SHA }}"
          dockerfile_path: "${{ matrix.image }}/Dockerfile"
          sbom_name: "${{ matrix.image }}"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
