name: Build, Push and Deploy to Staging

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY: 127893201980.dkr.ecr.ca-central-1.amazonaws.com/scan-files

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write
  checks: write
  statuses: write
  security-events: write

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: dorny/paths-filter@7267a8516b6f92bdb098633497bad573efdbf271 # v2.12.0
        id: filter
        with:
          filters: |
            api: 'api/**'
            module/s3-scan-object: 'module/s3-scan-object/**'

  build-push-and-deploy:
    if: needs.changes.outputs.images != '[]'
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.images) }}

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: arn:aws:iam::127893201980:role/scan-files-apply
          role-session-name: ECRPushAndDeploy
          aws-region: ca-central-1

      - name: Build container
        working-directory: ./${{ matrix.image }}
        run: |
          docker build \
            --build-arg GIT_SHA=$GITHUB_SHA \
            -t $REGISTRY/${{ matrix.image }}:$GITHUB_SHA \
            -t $REGISTRY/${{ matrix.image }}:latest .

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:$GITHUB_SHA
          docker push $REGISTRY/${{ matrix.image }}:latest

      - name: Deploy S3 scan object
        if: matrix.image == 'module/s3-scan-object'
        run: |
          aws lambda update-function-code \
            --function-name s3-scan-object \
            --image-uri $REGISTRY/${{ matrix.image }}:$GITHUB_SHA  > /dev/null 2>&1

      - name: Deploy API
        if: matrix.image == 'api'
        run: |
          aws lambda update-function-code \
            --function-name scan-files-api \
            --image-uri $REGISTRY/${{ matrix.image }}:$GITHUB_SHA  > /dev/null 2>&1
          aws lambda update-function-code \
            --function-name scan-files-api-provisioned \
            --image-uri $REGISTRY/${{ matrix.image }}:$GITHUB_SHA  > /dev/null 2>&1

      - name: Migrate database
        if: matrix.image == 'api'
        run: |
          aws lambda wait function-active --function-name scan-files-api
          source .github/workflows/scripts/migrate.sh
          migrate

      - name: Update alias for provisioned concurrency API
        if: matrix.image == 'api'
        run: |
          aws lambda wait function-active --function-name scan-files-api-provisioned
          VERSION="$(aws lambda publish-version --function-name scan-files-api-provisioned | jq -r '.Version')"
          aws lambda update-alias \
            --function-name scan-files-api-provisioned \
            --name latest \
            --function-version "$VERSION" > /dev/null 2>&1

      - name: API healthcheck
        uses: jtalk/url-health-check-action@61a0e49fff5cde3773b0bbe069d4ebbd04d24f07 # tag=v2
        with:
          url: https://scan-files.cdssandbox.xyz/version
          max-attempts: 3
          retry-delay: 5s

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@d6bb182e15f0cad80e7625887ae88e5830728aab # v3.0.0
        with:
          docker_image: "${{ env.REGISTRY }}/${{ matrix.image }}:${{ env.GITHUB_SHA }}"
          dockerfile_path: "${{ matrix.image }}/Dockerfile"
          sbom_name: "${{ matrix.image }}"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
