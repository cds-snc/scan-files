name: Download AV defs and Build and Push Container to ECR, deploy to lambda

on:
  workflow_dispatch:

env:
  GITHUB_SHA: ${{ github.sha }}
  ECR_ARN: arn:aws:ecr:ca-central-1:806545929748:repository/scan-files/api
  REGISTRY: 806545929748.dkr.ecr.ca-central-1.amazonaws.com/scan-files
  S3_BUCKET: scan-files-production-clamav-defs

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: write
  checks: write
  statuses: write

jobs:

  download-avdefs:
    runs-on: ubuntu-latest
    outputs:
      update_avdefs: ${{ steps.update_avdefs.outputs.update_avdefs }}

    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2 # tag=v1.6.1
        with:
          role-to-assume: arn:aws:iam::806545929748:role/OIDCGithubWorkflowRole
          role-session-name: GetS3AVDefs
          aws-region: ca-central-1

      - name: Get ECR tags
        run: |
          aws ecr list-tags-for-resource --region ca-central-1 --resource-arn arn:aws:ecr:ca-central-1:806545929748:repository/scan-files/api > /tmp/ecr_tags.json

      - name: Get Virus definition checksum
        run: |
          CURRENT_BYTECODE_CVD=`jq -r '.tags[] | select(.Key=="bytecode.cvd") | .Value' /tmp/ecr_tags.json`
          CURRENT_DAILY_CLD=`jq -r '.tags[] | select(.Key=="daily.cld") | .Value' /tmp/ecr_tags.json`
          CURRENT_DAILY_CVD=`jq -r '.tags[] | select(.Key=="daily.cvd") | .Value' /tmp/ecr_tags.json`
          CURRENT_MAIN_CVD=`jq -r '.tags[] | select(.Key=="main.cvd") | .Value' /tmp/ecr_tags.json`

          echo "CURRENT_BYTECODE_CVD=$CURRENT_BYTECODE_CVD" >> $GITHUB_ENV
          echo "CURRENT_DAILY_CLD=$CURRENT_DAILY_CLD" >> $GITHUB_ENV
          echo "CURRENT_DAILY_CVD=$CURRENT_DAILY_CVD" >> $GITHUB_ENV
          echo "CURRENT_MAIN_CVD=$CURRENT_MAIN_CVD" >> $GITHUB_ENV
          
      - name: Get S3 virus def tags
        run: |
          S3_BYTECODE_CVD=`aws s3api get-object-tagging --region ca-central-1 --bucket $S3_BUCKET --key clamav_defs/bytecode.cvd | jq -r '.TagSet[] | select(.Key=="md5") | .Value'`
          S3_DAILY_CLD=`aws s3api get-object-tagging --region ca-central-1 --bucket $S3_BUCKET --key clamav_defs/daily.cld | jq -r '.TagSet[] | select(.Key=="md5") | .Value'`
          S3_DAILY_CVD=`aws s3api get-object-tagging --region ca-central-1 --bucket $S3_BUCKET --key clamav_defs/daily.cvd | jq -r '.TagSet[] | select(.Key=="md5") | .Value'`
          S3_MAIN_CVD=`aws s3api get-object-tagging --region ca-central-1 --bucket $S3_BUCKET --key clamav_defs/main.cvd | jq -r '.TagSet[] | select(.Key=="md5") | .Value'`

          echo "S3_BYTECODE_CVD=$S3_BYTECODE_CVD" >> $GITHUB_ENV
          echo "S3_DAILY_CLD=$S3_DAILY_CLD" >> $GITHUB_ENV
          echo "S3_DAILY_CVD=$S3_DAILY_CVD" >> $GITHUB_ENV
          echo "S3_MAIN_CVD=$S3_MAIN_CVD" >> $GITHUB_ENV

      - name: Check if image needs to be updated
        id: update_avdefs
        shell: bash
        run: |
          if [[ $CURRENT_BYTECODE_CVD =~ ^[a-f0-9]{32}$ ]] && \
            [[ $CURRENT_DAILY_CLD =~ ^[a-f0-9]{32}$ ]] && \
            [[ $CURRENT_DAILY_CVD =~ ^[a-f0-9]{32}$ ]] && \
            [[ $CURRENT_MAIN_CVD =~ ^[a-f0-9]{32}$ ]] && \
            [[ $S3_BYTECODE_CVD =~ ^[a-f0-9]{32}$ ]] && \
            [[ $S3_DAILY_CLD =~ ^[a-f0-9]{32}$ ]] && \
            [[ $S3_DAILY_CVD =~ ^[a-f0-9]{32}$ ]] && \
            [[ $S3_MAIN_CVD =~ ^[a-f0-9]{32}$ ]]
          then
              if [ "$CURRENT_BYTECODE_CVD" != "$S3_BYTECODE_CVD" ]; then
                echo ::set-output name=update_avdefs::true
              elif [ "$CURRENT_DAILY_CLD" != "$S3_DAILY_CLD" ]; then
                echo ::set-output name=update_avdefs::true
              elif [ "$CURRENT_DAILY_CVD" != "$S3_DAILY_CVD" ]; then
                echo ::set-output name=update_avdefs::true
              elif [ "$CURRENT_MAIN_CVD" != "$S3_MAIN_CVD" ]; then
                echo ::set-output name=update_avdefs::true
              else
                echo ::set-output name=update_avdefs::false
              fi
          else
            echo ::set-output name=update_avdefs::false
          fi

  build-push-and-deploy:
    runs-on: ubuntu-latest
    needs: download-avdefs
    if: needs.download-avdefs.outputs.update_avdefs

    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2

      - name: Setup clamav defs directory
        working-directory: ./api
        run: |
          mkdir -p clamav_defs

      - name: Download antivirus definitions
        working-directory: ./api
        run: |
          aws s3api get-object --bucket $S3_BUCKET --key clamav_defs/bytecode.cvd clamav_defs/bytecode.cvd > /dev/null 2>&1
          aws s3api get-object --bucket $S3_BUCKET --key clamav_defs/daily.cld clamav_defs/daily.cld > /dev/null 2>&1
          aws s3api get-object --bucket $S3_BUCKET --key clamav_defs/daily.cvd clamav_defs/daily.cvd > /dev/null 2>&1
          aws s3api get-object --bucket $S3_BUCKET --key clamav_defs/main.cvd clamav_defs/main.cvd > /dev/null 2>&1

      - name: Build container
        working-directory: ./api
        run: |
          docker build \
          --build-arg git_sha=$GITHUB_SHA \
          -t $REGISTRY/api:$GITHUB_SHA \
          -t $REGISTRY/api:latest .

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2 # tag=v1.6.1
        with:
          role-to-assume: arn:aws:iam::806545929748:role/OIDCGithubWorkflowRole
          role-session-name: ECRPush
          aws-region: ca-central-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b # tag=v1.4.0

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/api:$GITHUB_SHA
          docker push $REGISTRY/api:latest

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy lambda
        run: |
          aws lambda update-function-code \
            --function-name scan-files-api \
            --image-uri $REGISTRY/api:latest  > /dev/null 2>&1

      - name: Get current date to log last avdefs update
        run: echo "AV_UPDATE_DATE=$(date +'%Y-%m')" >> $GITHUB_ENV

      - name: Tag new antivirus definitions
        run: |
          aws ecr tag-resource --resource-arn $ECR_ARN --tags Key=bytecode.cvd,Value=$S3_BYTECODE_CVD
          aws ecr tag-resource --resource-arn $ECR_ARN --tags Key=daily.cld,Value=$S3_DAILY_CLD
          aws ecr tag-resource --resource-arn $ECR_ARN --tags Key=daily.cvd,Value=$S3_DAILY_CVD
          aws ecr tag-resource --resource-arn $ECR_ARN --tags Key=main.cvd,Value=$S3_MAIN_CVD
          aws ecr tag-resource --resource-arn $ECR_ARN --tags Key=last_av_update,Value=$AV_UPDATE_DATE
