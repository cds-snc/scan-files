name: Build and Push Container to ECR, deploy to lambda

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY: 806545929748.dkr.ecr.ca-central-1.amazonaws.com/scan-files

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: write
  checks: write
  statuses: write

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin@v2

      - uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721 # pin@v2
        id: filter
        with:
          filters: |
            api: 'api/**'

  build-push-and-deploy:
    if: needs.changes.outputs.images != '[]'
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.images) }}

    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin@v2

      - name: Build container
        working-directory: ./${{ matrix.image }}
        run: |
          docker build \
          --build-arg git_sha=$GITHUB_SHA \
          -t $REGISTRY/${{ matrix.image }}:$GITHUB_SHA \
          -t $REGISTRY/${{ matrix.image }}:latest .

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@8a84b07f2009032ade05a88a28750d733cc30db1 # pin@v1
        with:
          role-to-assume: arn:aws:iam::806545929748:role/OIDCGithubWorkflowRole
          role-session-name: ECRPush
          aws-region: ca-central-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@3d4e073ce6a6845ed27b30a0fe05b6e22c80ac6b # pin@v1

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:$GITHUB_SHA
          docker push $REGISTRY/${{ matrix.image }}:latest

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy lambda
        if: matrix.image == 'api'
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.image }} \
            --image-uri $REGISTRY/${{ matrix.image }}:latest  > /dev/null 2>&1

      - name: Migrate Database
        if: matrix.image == 'api'
        run: |
          source .github/workflows/scripts/migrate.sh
          migrate

      - name: Generate ${{ matrix.image }}/docker SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@d39a08b2145375940f52c0b4b8c58a8cf3603bdb # pin@b09c1aefae9876dd2a23888c50b2daaa137ba01d
        with:
          dependency_track_api_key: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}
          docker_image: $REGISTRY/${{ matrix.image }}:$GITHUB_SHA
          project_name: scan-files/${{ matrix.image }}/docker
          project_type: docker

      - name: scan-files API healthcheck
        uses: jtalk/url-health-check-action@d6ec9590f0f1bd173fa43aeac8b75c2270e9069d # pin@v2
        with:
          url: https://scan-files.alpha.canada.ca/version
          max-attempts: 3
          retry-delay: 5s
